// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum NoteStatus {
  draft
  ready
  scheduled
  published
  failed
}

enum NoteFeedback {
  dislike
  like
}

enum IdeaStatus {
  noOutline
  new
  used
  archived
}

enum Plan {
  standard
  premium
  hobbyist
}

enum PotentialClientStatus {
  new
  contacted
  interested
  not_interested
  deleted
}

enum FreeUserStatus {
  new
  used
  revoked
}

enum AIUsageType {
  ideaGeneration
  textEnhancement
  titleOrSubtitleRefinement
  notesGeneration
  analyze
  seo
}

enum FeatureFlag {
  advancedGPT
  articles
  advancedFiltering
  instantPost
  populateNotes
  collaborativeNotes
  initQueue
  scheduleNotes
  canViewWriters
  canUseRadar
  canAutoDM
  chat
}

enum CookieName {
  substackSid
  substackLl
  cfBm
  cfClearance
}

enum CookieSameSite {
  noRestriction
  lax
  strict
  unspecified
}

enum AmPm {
  am
  pm
}

enum Interval {
  month
  year
}

enum UserDMType {
  chat
  directMessage
}

enum AttachmentType {
  image
  link
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userMetadata   UserMetadata[]
  ideas          Idea[]
  payment        Payment[]
  subscription   Subscription[]
  substackCookie SubstackCookie[]
  ScheduledNote  ScheduledNote[]
  UserSchedule   UserSchedule[]
  Settings       Settings[]
  userDMs        UserDM[]
  autoDMNotes    AutoDMNote[]
  notes          Note[]
  aiChats        AIChat[]
  extensionKeys  ExtensionKeys[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
  @@map("authenticators")
}

model UserMetadata {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @unique @db.ObjectId
  publicationId String? @unique @db.ObjectId

  tempAuthorId Int? // For users who sign up without having their publication analyzed

  notesDescription String?
  noteWritingStyle String?
  noteTopics       String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  plan         Plan?
  featureFlags FeatureFlag[] @default([])

  notesToGenerateCount Int  @default(3)
  maxScheduledNotes    Int?
  notesPromptVersion   Int? @default(1)

  preferredLanguage String? @default("en")

  notesLastUpdatedAt DateTime?
  dataUpdatedAt      DateTime?

  isAdmin Boolean @default(false)

  publication PublicationMetadata? @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userMetadata")
}

model Settings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  generatingDescription Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model PublicationMetadata {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  idInArticlesDb Int?
  authorId       Int

  publicationUrl String  @unique
  image          String?
  title          String?
  description    String?

  generatedDescription          String?
  generatedDescriptionForSearch String?
  generatedAboutGeneral         String?
  writingStyle                  String?
  topics                        String?
  personality                   String?
  specialEvents                 String?
  privateLife                   String?
  highlights                    String?

  // User-defined publication settings
  preferredTopics       String[]  @default([])
  personalDescription   String?
  userSettingsUpdatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userMetadata UserMetadata?
  ideas        Idea[]

  @@map("publicationMetadata")
}

model Idea {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  publicationId String? @db.ObjectId
  userId        String  @db.ObjectId

  topic       String?
  title       String
  subtitle    String
  description String
  outline     String
  inspiration String
  search      Boolean @default(false)
  image       String?

  didUserSee Boolean @default(true)

  body        String
  bodyHistory String[]

  status     IdeaStatus @default(new)
  isFavorite Boolean    @default(false)

  modelUsedForIdeas   String
  modelUsedForOutline String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  publication PublicationMetadata? @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  Image Image[]

  @@map("ideas")
}

model Note {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  body      String
  bodyJson  Json?
  summary   String
  type      String?
  thumbnail String?
  topics    String[]

  status          NoteStatus    @default(draft)
  feedback        NoteFeedback?
  feedbackComment String?

  scheduledTo DateTime?

  isArchived  Boolean @default(false)
  inspiration String?

  authorId Int
  handle   String?
  name     String?

  initialGeneratingModel String?
  generatingModel        String?

  sentViaScheduleAt DateTime?
  substackNoteId    String?

  sendFailedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  substackImage SubstackImage[]
  S3Attachment  S3Attachment[]

  @@map("note")
}

model NoteSuggestions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  noteId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  url    String @unique
  ideaId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@map("images")
}

model FreeUsers {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String? @unique

  code          String?        @unique
  plan          Plan           @default(standard)
  status        FreeUserStatus @default(new)
  name          String         @default("")
  codeExpiresAt DateTime?
  url           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("freeUsers")
}

model Payment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @map("user_id") @db.ObjectId
  priceId   String? @map("price_id")
  sessionId String? @map("session_id")
  productId String? @map("product_id")
  invoiceId String  @default("") @map("invoice_id")

  productName     String? @map("product_name")
  amountReceived  Int     @map("amount_received")
  currency        String  @map("currency")
  status          String  @map("status")
  paymentMethodId String? @map("payment_method_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PotentialClients {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status PotentialClientStatus @default(new)

  canonicalUrl    String  @unique
  title           String
  scheduledTo     String?
  publicationName String
  publicationId   String
  reactionCount   Int

  firstMessage String?
  authorName   String?
  authorUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("potentialClients")
}

// This is used to prevent the users from abusing the system by:
// 1. Generating too many ideas at once
// 2. Generating more than one description at once
model RailGuards {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  isGeneratingIdeas       Boolean @default(false)
  isGeneratingDescription Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("railGuards")
}

model aiUsage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId    String      @db.ObjectId
  plan      Plan
  type      AIUsageType
  usageName String
  credits   Int         @default(1) // Credits consumed by this usage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("aiUsage")
}

model Subscription {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  plan        Plan
  stripeSubId String    @unique // The Stripe subscription ID
  status      String // "active", "canceled", etc.
  startDate   DateTime  @default(now())
  endDate     DateTime?
  isTrialing  Boolean   @default(false)
  trialStart  DateTime?
  trialEnd    DateTime?

  // Credits information
  creditsPerPeriod Int @default(0)
  creditsRemaining Int @default(0)

  lastCreditReset DateTime @default(now()) // When credits were last reset

  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  interval Interval @default(month)

  couponIdApplied String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model CouponUsage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  couponCode String
  userId     String @db.ObjectId

  @@unique([couponCode, userId])
  @@map("couponUsages")
}

model Visits {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  name   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("visits")
}

model SubstackCookie {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  name      CookieName
  value     String
  expiresAt Int?
  domain    String
  path      String
  secure    Boolean
  httpOnly  Boolean
  sameSite  CookieSameSite

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // name+userId has to be unique
  @@unique([name, userId])
  @@map("substackCookies")
}

model ScheduledNote {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  noteId String @db.ObjectId
  userId String @db.ObjectId

  scheduledAt    DateTime
  cronExpression String
  scheduleId     String

  isDeleted Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubstackImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  imageId     String  @unique
  imageUrl    String  @unique
  imageWidth  Int
  imageHeight Int
  explicit    Boolean @default(false)

  noteId         String @db.ObjectId
  s3AttachmentId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("substackImages")
}

model S3Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  s3Url    String @unique
  noteId   String @db.ObjectId
  fileName String

  type AttachmentType @default(image)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("s3Attachments")
}

model UserSchedule {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  sunday    Boolean @default(true)
  monday    Boolean @default(true)
  tuesday   Boolean @default(true)
  wednesday Boolean @default(true)
  thursday  Boolean @default(true)
  friday    Boolean @default(true)
  saturday  Boolean @default(true)

  hour   Int
  minute Int
  ampm   AmPm

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([hour, minute, ampm, userId])
  @@map("userSchedules")
}

model SubstackPublishedNote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  substackNoteId String @unique
  userId         String @db.ObjectId
  noteId         String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("substackPublishedNotes")
}

model PotentialPublicationUsers {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  publicationIdInArticlesDb String
  bylineId                  Int
  score                     Int
  isFollowing               Boolean @default(false)
  isSubscribed              Boolean @default(false)
  bestsellerTier            Int     @default(0)
  subscriberCount           Int     @default(0)
  subscriberCountString     String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([publicationIdInArticlesDb, bylineId])
  @@map("potentialPublicationUsers")
}

// Readers the user has replaced messages with
model SubstackReadersContacted {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId   String @db.ObjectId
  readerId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("substackReadersContacted")
}

model FreeUserEngagers {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userAuthorId String

  authorId              String
  photoUrl              String
  name                  String
  handle                String
  subscriberCount       Int
  subscriberCountString String
  score                 Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userAuthorId, authorId])
  @@map("freeUserEngagers")
}

model FreeUsageNoteGeneration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId

  nextAvailableDate DateTime
  notesGenerated    Int      @default(0)
  maxNotes          Int      @default(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("freeUsageNoteGeneration")
}

model UserDM {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId

  chatId    String     @db.ObjectId
  type      UserDMType
  title     String
  subtitle  String
  timestamp DateTime

  recentMessageId        String?
  recentMessageCreatedAt DateTime?
  recentMessageBody      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userDMs")
}

model AutoDMNote {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  noteId  String @db.ObjectId
  userId  String @db.ObjectId
  message String

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  autoDMMessagesSent AutoDMMessageSent[]

  @@map("autoDMNotes")
}

model AutoDMMessageSent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  autoDMNoteId       String @db.ObjectId
  sentToAutoDMNoteId String @db.ObjectId
  message            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  autoDMNote AutoDMNote @relation(fields: [autoDMNoteId], references: [id], onDelete: Cascade)

  @@map("autoDMMessageSent")
}

// WriteStack AI Chat Models
model AIChat {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  title  String @default("New Chat")

  lastMessageAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages AIChatMessage[]

  @@map("aiChats")
}

model AIChatMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  chatId  String @db.ObjectId
  role    String // "user" | "assistant" | "system"
  content String @db.String

  // For tracking function calls made by the assistant
  functionCalls Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat AIChat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("aiChatMessages")
}

model DataFetchedMetadata {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId

  lastFetchedNotesStatsAt DateTime?
  lastFetchedNotesAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dataFetchedMetadata")
}

model ExtensionKeys {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  key    String @unique

  isActive Boolean @default(true)
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("extensionKeys")
}

model NotesStatsFailed {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId          String @db.ObjectId
  notesJsonString String @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExtensionDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId @unique

  versionInstalled String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("extensionDetails")
}